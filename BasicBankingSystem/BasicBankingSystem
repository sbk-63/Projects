import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Date;
import java.util.regex.Pattern;
import java.io.*;

public class BasicBankingSystem {

    private final Scanner input = new Scanner(System.in);
    private static final SecureRandom random = new SecureRandom();
    private final DatabaseManager dbManager;
    private final Console console = System.console();

    // Database connection details
    private static final String DB_URL = "jdbc:mysql://localhost:3306/banking_system";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "123456";

    public BasicBankingSystem() {
        dbManager = new DatabaseManager(DB_URL, DB_USER, DB_PASSWORD);
        dbManager.initializeDatabase(); // Ensure tables exist
    }

    // Nested classes (Account, Transaction)
    public static class Transaction {
        private long transactionId;
        private final long accountNumber;
        private final String transactionType; // CREDIT or DEBIT
        private final double amount;
        private final Date date;

        public Transaction(long accountNumber, String transactionType, double amount) {
            this.transactionId = 0; // Placeholder, the DB will generate the actual ID.
            this.accountNumber = accountNumber;
            this.transactionType = transactionType;
            this.amount = amount;
            this.date = new Date();
        }

        // Constructor for loading an existing transaction from the database.
        public Transaction(long transactionId, long accountNumber, String transactionType, double amount, Date date) {
            this.transactionId = transactionId;
            this.accountNumber = accountNumber;
            this.transactionType = transactionType;
            this.amount = amount;
            this.date = date;
        }

        // Getters
        public long getTransactionId() {
            return transactionId; }
        public long getAccountNumber() {
            return accountNumber; }
        public String getTransactionType() {
            return transactionType; }
        public double getAmount() {
            return amount; }
        public Date getDate() {
            return date; }

        // Setters
        public void setTransactionId(long transactionId) {
            this.transactionId = transactionId;
        }

        @Override
        public String toString() {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            return "Transaction { " +
                    "ID: " + transactionId +
                    ", Account: " + accountNumber +
                    ", Type: " + transactionType +
                    ", Amount: " + String.format("%.2f", amount) +
                    ", Date: " + sdf.format(date) +
                    " }";
        }
    }

    public static class Account {
        private String name;
        private Date DOB;
        private long mobileNumber;
        private long aadharNumber;
        private String emailID;
        private final long accountNumber;
        private String hashedPassword; // SHA-256 hashed password
        private double balance;
        private final List<Transaction> transactions; // Transactions will be loaded/saved separately

        public Account(String name, Date DOB, String emailID, long mobileNumber, long aadharNumber, long accountNumber, String hashedPassword) {
            this.name = name;
            this.DOB = DOB;
            this.emailID = emailID;
            this.mobileNumber = mobileNumber;
            this.aadharNumber = aadharNumber;
            this.accountNumber = accountNumber;
            this.hashedPassword = hashedPassword;
            this.balance = 0.0;
            this.transactions = new ArrayList<>();
        }

        // Constructor for loading from DB
        public Account(long accountNumber, String name, Date DOB, String emailID, long mobileNumber, long aadharNumber, String hashedPassword, double balance) {
            this.accountNumber = accountNumber;
            this.name = name;
            this.DOB = DOB;
            this.mobileNumber = mobileNumber;
            this.aadharNumber = aadharNumber;
            this.emailID = emailID;
            this.hashedPassword = hashedPassword;
            this.balance = balance;
            this.transactions = new ArrayList<>(); // Transactions will be populated by the DB manager
        }

        // Getters
        public String getName() {
            return name; }
        public Date getDOB() {
            return DOB; }
        public long getMobileNumber() {
            return mobileNumber; }
        public long getAadharNumber() {
            return aadharNumber; }
        public String getEmailID() {
            return emailID; }
        public long getAccountNumber() {
            return accountNumber; }
        public String getHashedPassword() {
            return hashedPassword; }
        public double getBalance() {
            return balance; }
        public List<Transaction> getTransactions() {
            return transactions; } // This will be populated by DB

        // Setters
        void setHashedPassword(String hashedPassword){
            this.hashedPassword = hashedPassword;
        }

        void setName(String name){
            this.name = name;
        }

        void setMobileNumber(long mobileNumber){
            this.mobileNumber = mobileNumber;
        }

        void setAadharNumber(long aadharNumber){
            this.aadharNumber = aadharNumber;
        }

        void setEmailID (String emailID){
            this.emailID = emailID;
        }

        // Update balance (used by DatabaseManager)
        void setBalance(double balance) {
            this.balance = balance;
        }

        // Validate the entered password.
        boolean authenticate(String rawPassword) {
            return verifyPassword(rawPassword, hashedPassword);
        }

        @Override
        public String toString() {
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            return "Account { " +
                    "AccountNumber: " + accountNumber +
                    ", Name: " + name +
                    ", Email: " + emailID +
                    ", Mobile: " + mobileNumber +
                    ", Aadhar: " + aadharNumber +
                    ", Balance: " + String.format("%.2f", balance) +
                    ", DOB: " + sdf.format(DOB) +
                    " }";
        }
    }

    // --- DatabaseManager Class ---
    public static class DatabaseManager {
        private final String url;
        private final String user;
        private final String password;

        public DatabaseManager(String url, String user, String password) {
            this.url = url;
            this.user = user;
            this.password = password;
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
            } catch (ClassNotFoundException e) {
                System.err.println("MySQL JDBC Driver not found. Please add it to your classpath.");
                System.exit(1);
            }
        }

        public Connection getConnection() throws SQLException {
            return DriverManager.getConnection(url, user, password);
        }

        // Ensure tables exist
        public void initializeDatabase() {
            try (Connection conn = getConnection();
                 Statement stmt = conn.createStatement()) {
                stmt.execute("CREATE TABLE IF NOT EXISTS accounts (" +
                        "account_number BIGINT PRIMARY KEY," +
                        "name VARCHAR(255) NOT NULL," +
                        "dob DATE NOT NULL," +
                        "mobile_number BIGINT UNIQUE NOT NULL," +
                        "aadhar_number BIGINT UNIQUE NOT NULL," +
                        "email_id VARCHAR(255) UNIQUE NOT NULL," +
                        "hashed_password VARCHAR(255) NOT NULL," +
                        "balance DOUBLE DEFAULT 0.0" +
                        ")");

                stmt.execute("CREATE TABLE IF NOT EXISTS transactions (" +
                        "transaction_id BIGINT AUTO_INCREMENT PRIMARY KEY," +
                        "account_number BIGINT NOT NULL," +
                        "transaction_type VARCHAR(10) NOT NULL," +
                        "amount DOUBLE NOT NULL," +
                        "transaction_date DATETIME NOT NULL," +
                        "FOREIGN KEY (account_number) REFERENCES accounts(account_number) ON DELETE CASCADE" +
                        ")");
                System.out.println("Database tables checked/created successfully.");
            } catch (SQLException e) {
                System.err.println("Error initializing database: " + e.getMessage());
            }
        }

        public boolean doesAccountNumberExist(long accountNumber) {
            String sql = "SELECT COUNT(*) FROM accounts WHERE account_number = ?";
            try (Connection conn = getConnection();
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setLong(1, accountNumber);
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            } catch (SQLException e) {
                System.err.println("Error checking account number existence: " + e.getMessage());
            }
            return false;
        }

        public boolean doesEmailExist(String email) {
            String sql = "SELECT COUNT(*) FROM accounts WHERE email_id = ?";
            try (Connection conn = getConnection();
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, email);
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            } catch (SQLException e) {
                System.err.println("Error checking email existence: " + e.getMessage());
            }
            return false;
        }

        public boolean doesMobileNumberExist(long mobileNumber) {
            String sql = "SELECT COUNT(*) FROM accounts WHERE mobile_number = ?";
            try (Connection conn = getConnection();
                 PreparedStatement pst = conn.prepareStatement(sql)) {
                pst.setLong(1, mobileNumber);
                ResultSet rs = pst.executeQuery();
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            } catch (SQLException e) {
                System.err.println("Error checking mobile number existence: " + e.getMessage());
            }
            return false;
        }

        public void createAccount(Account account) {
            String sql = "INSERT INTO accounts (account_number, name, dob, mobile_number, aadhar_number, email_id, hashed_password, balance) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            try (Connection conn = getConnection();
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setLong(1, account.getAccountNumber());
                pstmt.setString(2, account.getName());
                pstmt.setDate(3, new java.sql.Date(account.getDOB().getTime()));
                pstmt.setLong(4, account.getMobileNumber());
                pstmt.setLong(5, account.getAadharNumber());
                pstmt.setString(6, account.getEmailID());
                pstmt.setString(7, account.getHashedPassword());
                pstmt.setDouble(8, account.getBalance());
                pstmt.executeUpdate();
                System.out.println("Account saved to database.");
            } catch (SQLException e) {
                System.err.println("Error saving account: " + e.getMessage());
            }
        }

        public Account getAccountByAccountNumber(long accountNumber) {
            String sql = "SELECT * FROM accounts WHERE account_number = ?";
            try (Connection conn = getConnection();
                 PreparedStatement pst = conn.prepareStatement(sql)) {
                pst.setLong(1, accountNumber);
                ResultSet rs = pst.executeQuery();
                if (rs.next()) {
                    return new Account(
                            rs.getLong("account_number"),
                            rs.getString("name"),
                            rs.getDate("dob"),
                            rs.getString("email_id"),
                            rs.getLong("mobile_number"),
                            rs.getLong("aadhar_number"),
                            rs.getString("hashed_password"),
                            rs.getDouble("balance")
                    );
                }
            } catch (SQLException e) {
                System.err.println("Error retrieving account: " + e.getMessage());
            }
            return null;
        }

        public Account getAccountByMobileNumber(long mobileNumber) {
            String sql = "SELECT * FROM accounts WHERE mobile_number = ?";
            try (Connection conn = getConnection();
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setLong(1, mobileNumber);
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    return new Account(
                            rs.getLong("account_number"),
                            rs.getString("name"),
                            rs.getDate("dob"),
                            rs.getString("email_id"),
                            rs.getLong("mobile_number"),
                            rs.getLong("aadhar_number"),
                            rs.getString("hashed_password"),
                            rs.getDouble("balance")
                    );
                }
            } catch (SQLException e) {
                System.err.println("Error retrieving account by mobile: " + e.getMessage());
            }
            return null;
        }

        public Account getAccountByEmail(String email) {
            String sql = "SELECT * FROM accounts WHERE email_id = ?";
            try (Connection conn = getConnection();
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, email);
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    return new Account(
                            rs.getLong("account_number"),
                            rs.getString("name"),
                            rs.getDate("dob"),
                            rs.getString("email_id"),
                            rs.getLong("mobile_number"),
                            rs.getLong("aadhar_number"),
                            rs.getString("hashed_password"),
                            rs.getDouble("balance")
                    );
                }
            } catch (SQLException e) {
                System.err.println("Error retrieving account by email: " + e.getMessage());
            }
            return null;
        }


        public void updateAccount(Connection conn, Account account) throws SQLException {
            String sql = "UPDATE accounts SET name = ?, dob = ?, mobile_number = ?, aadhar_number = ?, email_id = ?, hashed_password = ?, balance = ? WHERE account_number = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, account.getName());
                pstmt.setDate(2, new java.sql.Date(account.getDOB().getTime()));
                pstmt.setLong(3, account.getMobileNumber());
                pstmt.setLong(4, account.getAadharNumber());
                pstmt.setString(5, account.getEmailID());
                pstmt.setString(6, account.getHashedPassword());
                pstmt.setDouble(7, account.getBalance());
                pstmt.setLong(8, account.getAccountNumber());
                pstmt.executeUpdate();
            }
        }

        // Overloaded method for operations that don't need external transaction management.
        public void updateAccount(Account account) {
            try (Connection conn = getConnection()) {
                updateAccount(conn, account);
                System.out.println("Account updated in database.");
            } catch (SQLException e) {
                System.err.println("Error updating account: " + e.getMessage());
            }
        }

        public void deleteAccount(long accountNumber) {
            String sql = "DELETE FROM accounts WHERE account_number = ?";
            try (Connection conn = getConnection();
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setLong(1, accountNumber);
                pstmt.executeUpdate();
                System.out.println("Account deleted from database.");
            } catch (SQLException e) {
                System.err.println("Error deleting account: " + e.getMessage());
            }
        }

        public void addTransaction(Connection conn, Transaction transaction) throws SQLException {
            String sql = "INSERT INTO transactions (account_number, transaction_type, amount, transaction_date) VALUES (?, ?, ?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                pstmt.setLong(1, transaction.getAccountNumber());
                pstmt.setString(2, transaction.getTransactionType());
                pstmt.setDouble(3, transaction.getAmount());
                pstmt.setTimestamp(4, new Timestamp(transaction.getDate().getTime()));
                int affectedRows = pstmt.executeUpdate();

                if (affectedRows > 0) {
                    try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                        if (generatedKeys.next()) {
                            transaction.setTransactionId(generatedKeys.getLong(1));
                        } else {
                            throw new SQLException("Creating transaction failed, no ID obtained.");
                        }
                    }
                }
            }
        }

        public List<Transaction> getTransactionsForAccount(long accountNumber) {
            List<Transaction> transactions = new ArrayList<>();
            String sql = "SELECT * FROM transactions WHERE account_number = ? ORDER BY transaction_date DESC";
            try (Connection conn = getConnection();
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setLong(1, accountNumber);
                ResultSet rs = pstmt.executeQuery();
                while (rs.next()) {
                    transactions.add(new Transaction(
                            rs.getLong("transaction_id"),
                            rs.getLong("account_number"),
                            rs.getString("transaction_type"),
                            rs.getDouble("amount"),
                            rs.getTimestamp("transaction_date")
                    ));
                }
            } catch (SQLException e) {
                System.err.println("Error retrieving transactions: " + e.getMessage());
            }
            return transactions;
        }
    }


    // Fundamental Section
    String name() {
        boolean validName = false;
        String name = "";
        while (!validName) {
            System.out.print("Enter Your Name: ");
            name = input.nextLine();
            String regex = "^[a-zA-Z]+( [a-zA-Z]+)*$";
            validName = Pattern.matches(regex, name);
            if (!validName)
                System.out.println("Invalid Name! Please use alphabetic characters only.");
        }
        return name;
    }

    long mobileNumber() {
        boolean valid = false;
        long number = 0;
        while (!valid) {
            System.out.print("Enter Your Mobile Number: ");
            String numStr = input.nextLine(); // Read as string
            try {
                number = Long.parseLong(numStr);
                if (numStr.length() == 10) {
                    if (dbManager.doesMobileNumberExist(number)) {
                        System.out.println("Mobile number already registered. Please use a different one.");
                    } else {
                        valid = true;
                    }
                } else {
                    System.out.println("Invalid Mobile Number! Please enter a 10-digit number.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a numeric 10-digit mobile number.");
            }
        }
        return number;
    }

    long aadharNumber() {
        boolean valid = false;
        long number = 0;
        while (!valid) {
            System.out.print("Enter Your Aadhar Number: ");
            String numStr = input.nextLine(); // Read as string
            try {
                number = Long.parseLong(numStr);
                if (numStr.length() == 12) {
                    // In a real system, you'd check for Aadhar existence in DB
                    valid = true;
                } else {
                    System.out.println("Invalid Aadhar Number! Please enter a 12-digit number.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a numeric 12-digit Aadhar number.");
            }
        }
        return number;
    }

    String email() {
        boolean valid = false;
        String email = "";
        while (!valid) {
            System.out.print("Enter Your Email: ");
            email = input.nextLine();
            String regex = "^[a-zA-Z0-9_.+%]+@[a-zA-Z0-9_.+%]+\\.[a-zA-Z]{2,}$";
            if (Pattern.matches(regex, email)) {
                if (dbManager.doesEmailExist(email)) {
                    System.out.println("Email ID already registered. Please use a different one.");
                } else {
                    valid = true;
                }
            } else {
                System.out.println("Invalid Email! Please enter a valid email address.");
            }
        }
        return email;
    }

    Date DOB(){
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        sdf.setLenient(false); // Make parsing strict
        Date dob = null;
        while (dob == null){
            System.out.print("Enter Your Date of birth in (dd-mm-yyyy): ");
            String date = input.nextLine();
            try {
                dob = sdf.parse(date);
            } catch (ParseException e) {
                System.out.println("Invalid date format or invalid date. Please use dd-mm-yyyy.");
            }
        }
        return dob;
    }

    boolean checkValidPassword(String password) {
        if (password.length() < 8) {
            return false;
        }
        String upperCasePattern = ".*[A-Z].*";
        String lowerCasePattern = ".*[a-z].*";
        String digitPattern = ".*[0-9].*";
        String specialCharPattern = ".*[!@#$%^&*()\\-_=+<>?].*";

        boolean hasUpperCase = password.matches(upperCasePattern);
        boolean hasLowerCase = password.matches(lowerCasePattern);
        boolean hasDigit = password.matches(digitPattern);
        boolean hasSpecialChar = password.matches(specialCharPattern);
        return hasUpperCase && hasLowerCase && hasDigit && hasSpecialChar;
    }

    // Generate a unique account number.
    long generateAccountNumber() {
        long accountNumber;
        do {
            accountNumber = 100000000000L + Math.abs(random.nextLong() % 900000000000L);
        } while (dbManager.doesAccountNumberExist(accountNumber)); // Check database
        return accountNumber;
    }

    // generate 6 digit Password
    private int generateOtp() {
        int otp = 100000 + random.nextInt(900000);
        System.out.println("Generated OTP: " + otp); // In a real app, this would be sent via SMS/Email
        return otp;
    }

    private boolean verifyOtp() {
        final int MAX_ATTEMPT = 3;
        int otp = generateOtp();
        for (int i = 0; i < MAX_ATTEMPT; i++) {
            System.out.print("Enter OTP: "); 
            int entered;
            try {
                entered = input.nextInt();
                input.nextLine(); // consume newline
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter a number.");
                input.nextLine(); // consume the invalid input
                i--; // Decrement i to not count this as an attempt
                continue;
            }

            if(otp == entered){
                return true;
            } else {
                System.out.println("Incorrect OTP");
                if(i < MAX_ATTEMPT - 1){
                    System.out.println("1. Re-enter, 2. Resend OTP, and 3. cancel.");
                    System.out.print("Enter option: ");
                    byte option;
                    try {
                        option = input.nextByte();
                        input.nextLine(); // consume newline
                    } catch (InputMismatchException e) {
                        System.out.println("Invalid input. Please enter a number.");
                        input.nextLine();
                        i--; // Decrement i to not count this as an attempt
                        continue;
                    }

                    if(option == 3){
                        return false;
                    }
                    if(option == 2){
                        otp = generateOtp();
                        System.out.println("Re-generated OTP is: " + otp);
                    }
                }
            }
        }
        System.out.println("Maximum OTP attempts reached.");
        return false;
    }

    // Generate Password of length between 12 and 16
    String generatePassword() {
        int len = 12 + random.nextInt(5);
        StringBuilder password = new StringBuilder();
        String UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String LOWER = "abcdefghijklmnopqrstuvwxyz";
        String DIGITS = "0123456789";
        String SPECIAL = "!@#$%^&*()-_=+<>?";
        String ALL = UPPER + LOWER + DIGITS + SPECIAL;

        // Ensure at least one of each character type
        password.append(UPPER.charAt(random.nextInt(UPPER.length())));
        password.append(LOWER.charAt(random.nextInt(LOWER.length())));
        password.append(DIGITS.charAt(random.nextInt(DIGITS.length())));
        password.append(SPECIAL.charAt(random.nextInt(SPECIAL.length())));

        for (int i = 4; i < len; i++) { // Start from 4 as 4 chars are already added
            password.append(ALL.charAt(random.nextInt(ALL.length())));
        }

        // Shuffle the password to mix the required characters
        List<Character> chars = new ArrayList<>();
        for (char c : password.toString().toCharArray()) {
            chars.add(c);
        }
        Collections.shuffle(chars);
        StringBuilder shuffledPassword = new StringBuilder();
        for (char c : chars) {
            shuffledPassword.append(c);
        }
        return shuffledPassword.toString();
    }

    // Generate password with salt value
    private String hashPassword(String password) {
        byte[] salt = new byte[16];
        random.nextBytes(salt);
        String saltStr = Base64.getEncoder().encodeToString(salt);
        String saltedPassword = saltStr + password;

        String hashedPassword = SHA256(saltedPassword);
        return saltStr + ":" + hashedPassword;
    }

    private static String SHA256(String password){
        try{
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hash = digest.digest(password.getBytes(StandardCharsets.UTF_8));
            StringBuilder hexString = new StringBuilder();
            for (byte b : hash) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1)
                    hexString.append('0');
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("SHA-256 algorithm not found.", e);
        }
    }

    private static boolean verifyPassword(String rawPassword, String hashedPassword) {
        String[] parts = hashedPassword.split(":");
        if(parts.length != 2){
            // This could happen if a stored password is corrupted or not in the expected format
            System.err.println("Error: Invalid stored password format.");
            return false;
        }
        String saltStr = parts[0];
        String storedHash = parts[1];
        String saltedPassword = saltStr + rawPassword;

        return storedHash.equals(SHA256(saltedPassword));
    }

    String createPassword() {
        System.out.print("1. System Generated Password, 2. Own password: ");
        int choice;
        try {
            choice = input.nextInt();
            input.nextLine(); // Consume newline
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Choosing System Generated Password.");
            input.nextLine();
            choice = 1;
        }

        String password = "";
        if (choice == 1) {
            password = generatePassword();
            System.out.println("Generated Password: " + password);
        } else {
            boolean passwordSet = false;
            for (int i = 0; i < 3; i++) {
                System.out.println("Password must contain at least 8 characters, one uppercase letter, " +
                        "one lowercase letter, one digit, and one special character.");
                if (console != null) {
                    char[] passArray = console.readPassword("Enter Password: ");
                    password = new String(passArray);
                } else {
                    System.out.print("Enter Password: ");
                    password = input.nextLine();
                }
                if (checkValidPassword(password)) {
                    passwordSet = true;
                    break;
                } else {
                    System.out.println("Password does not meet the required criteria. Please try again.");
                }
            }
            if (!passwordSet) {
                System.out.println("----You exceeded attempts. Generating a default password.-----");
                password = generatePassword();
                System.out.println("Generated Password: " + password);
            }
        }
        return hashPassword(password);
    }

    public void createAccount() {
        System.out.println("=========== Account Creation ===========");
        String name = name();
        Date DOB = DOB();
        long mobile = mobileNumber();
        long aadhar = aadharNumber();
        String email = email();
        long accountNumber = generateAccountNumber();

        // OTP Verification
        if (!verifyOtp()) {
            System.out.println("OTP verification failed. Account creation aborted.");
            return;
        }

        String hashedPwd = createPassword();
        Account newAccount = new Account(name, DOB, email, mobile, aadhar, accountNumber, hashedPwd);
        dbManager.createAccount(newAccount); // Save to database

        System.out.println("Account created successfully!");
        System.out.println(newAccount);
    }

    // Account Control Center Section
    void deleteAccount() {
        System.out.print("Do you want to delete your account? (y/n): ");
        String str = input.nextLine().trim().toLowerCase();
        if (!str.equals("y")) {
            System.out.println("Account deletion canceled.");
            return;
        }
        System.out.print("Enter Account Number: ");
        long accNum;
        try {
            accNum = input.nextLong();
            input.nextLine(); // clear nextLine buffer
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter a numeric account number.");
            input.nextLine();
            return;
        }

        Account acc = dbManager.getAccountByAccountNumber(accNum);
        if (acc == null) {
            System.out.println("Account Not Found. Account deletion failed.");
            return;
        }
        String password;
        if (console != null) {
            char[] passArray = console.readPassword("Enter Password: ");
            password = new String(passArray);
        } else {
            System.out.print("Enter Password: ");
            password = input.nextLine();
        }
        if (!acc.authenticate(password)) {
            System.out.println("Incorrect Password. Account deletion failed.");
            return;
        }
        if (!verifyOtp()) {
            System.out.println("OTP verification failed. Account deletion aborted.");
            return;
        }
        // Final confirmation before deletion
        System.out.print("Are you sure, you want to delete this account? This action cannot be undone. (y/n): ");
        String confirmation = input.nextLine().trim().toLowerCase();
        if (!confirmation.equals("y")) {
            System.out.println("Account deletion canceled.");
            return;
        }
        // Remove account from database
        dbManager.deleteAccount(accNum);

        System.out.println("------------- Account Successfully Deleted! ------------");
    }

    private Account getAccountForUpdate(String action) {
        System.out.print("Do you want to " + action + " (y/n): ");
        String str = input.nextLine().trim().toLowerCase();
        if (!str.equals("y")) {
            return null;
        }
        System.out.print("Enter Account Number: ");
        long accNum;
        try {
            accNum = input.nextLong();
            input.nextLine();
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter a numeric account number.");
            input.nextLine();
            return null;
        }

        Account acc = dbManager.getAccountByAccountNumber(accNum);
        if (acc == null) {
            System.out.println("Account Not Found.");
            return null;
        }
        String password;
        if (console != null) {
            char[] passArray = console.readPassword("Enter Password: ");
            password = new String(passArray);
        } else {
            System.out.print("Enter Password: ");
            password = input.nextLine();
        }
        if(!acc.authenticate(password)){
            System.out.println("Invalid Password!");
            return null;
        }
        if (!verifyOtp()) {
            System.out.println("OTP verification failed. Operation aborted.");
            return null;
        }
        return acc;
    }

    void updateName() {
        Account acc = getAccountForUpdate("update Name");
        if (acc != null) {
            String oldName = acc.getName();
            String newName = name();
            acc.setName(newName);
            dbManager.updateAccount(acc);
            System.out.println("Name Successfully Updated from '" + oldName + "' to '" + newName + "'!");
        }
    }

    void updateMobileNumber() {
        Account acc = getAccountForUpdate("update Mobile Number");
        if (acc != null) {
            long oldMobile = acc.getMobileNumber();
            long newMobile = mobileNumber(); // This method now checks for existence
            acc.setMobileNumber(newMobile);
            dbManager.updateAccount(acc);
            System.out.println("Mobile Number Successfully Updated from " + oldMobile + " to " + newMobile + "!");
        }
    }

    void updateAadharNumber() {
        Account acc = getAccountForUpdate("update Aadhar Number");
        if (acc != null) {
            long oldAadhar = acc.getAadharNumber();
            long newAadhar = aadharNumber();
            acc.setAadharNumber(newAadhar);
            dbManager.updateAccount(acc);
            System.out.println("Aadhar Number Successfully Updated from " + oldAadhar + " to " + newAadhar + "!");
        }
    }

    void updateEmailID() {
        Account acc = getAccountForUpdate("update Email ID");
        if (acc != null) {
            String oldEmail = acc.getEmailID();
            String newEmail = email(); // This method now checks for existence
            acc.setEmailID(newEmail);
            dbManager.updateAccount(acc);
            System.out.println("Email ID Successfully Updated from '" + oldEmail + "' to '" + newEmail + "'!");
        }
    }

    void updatePassword() {
        Account acc = getAccountForUpdate("update Password");
        if (acc != null) {
            acc.setHashedPassword(createPassword());
            dbManager.updateAccount(acc);
            System.out.println("Password Successfully Updated!");
        }
    }

    void resetPassword(){
        System.out.print("Do you want to Reset Password (y/n): ");
        String str = input.nextLine().trim().toLowerCase();
        if (!str.equals("y")) {
            return;
        }
        System.out.print("Enter Account Number: ");
        long accNum;
        try {
            accNum = input.nextLong();
            input.nextLine();
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter a numeric account number.");
            input.nextLine();
            return;
        }

        Account acc = dbManager.getAccountByAccountNumber(accNum);
        if (acc == null) {
            System.out.println("Account Not Found.");
            return;
        }

        System.out.print("Enter Mobile number: ");
        long mob;
        try {
            mob = input.nextLong();
            input.nextLine();
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter a numeric mobile number.");
            input.nextLine();
            return;
        }

        if(acc.getMobileNumber() == mob){
            if(verifyOtp()){
                acc.setHashedPassword(createPassword());
                dbManager.updateAccount(acc);
                System.out.println("----------Password Reset Successfully!----------");
            } else {
                System.out.println("OTP verification failed. Password reset aborted.");
            }
        } else {
            System.out.println("Invalid Mobile Number.");
        }
    }


    // Account Menu Section
    private long loginWithAccNum(){
        System.out.print("Enter Account Number: ");
        long accNum;
        try {
            accNum = input.nextLong();
            input.nextLine();
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter a numeric account number.");
            input.nextLine();
            return -1;
        }
        return accNum;
    }

    private long loginWithMob(){
        System.out.print("Enter Mobile Number: ");
        long mob;
        try {
            mob = input.nextLong();
            input.nextLine();
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter a numeric mobile number.");
            input.nextLine();
            return -1;
        }
        Account acc = dbManager.getAccountByMobileNumber(mob);
        if(acc == null){
            System.out.println("Invalid Mobile Number or Account Not Found.");
            return -1;
        }
        return acc.getAccountNumber();
    }

    private long loginWithEmail(){
        System.out.print("Enter Email id: ");
        String email = input.nextLine();
        Account acc = dbManager.getAccountByEmail(email);
        if(acc == null){
            System.out.println("Invalid Email ID or Account Not Found.");
            return -1;
        }
        return acc.getAccountNumber();
    }

    private Account login() {
        System.out.println("Login with:");
        System.out.println("1. Account Number");
        System.out.println("2. Mobile Number");
        System.out.println("3. Email ID");
        System.out.print("Enter Option: ");
        byte option;
        try {
            option = input.nextByte();
            input.nextLine(); // Consume newline
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter a number between 1-3.");
            input.nextLine();
            return null;
        }

        long accNum = -1;
        switch (option) {
            case 1:
                accNum = loginWithAccNum();
                break;
            case 2:
                accNum = loginWithMob();
                break;
            case 3:
                accNum = loginWithEmail();
                break;
            default:
                System.out.println("Invalid option.");
                return null;
        }

        if (accNum == -1) {
            return null; // Login method returned invalid number or account not found
        }

        Account acc = dbManager.getAccountByAccountNumber(accNum);
        if (acc == null) {
            System.out.println("Account not found!");
            return null;
        }
        String password;
        if (console != null) {
            char[] passArray = console.readPassword("Enter Password: ");
            password = new String(passArray);
        } else {
            System.out.print("Enter Password: ");
            password = input.nextLine();
        }
        if (acc.authenticate(password)) {
            if(!verifyOtp()){
                System.out.println("OTP verification failed, Account login Aborted!");
                return null;
            }
            System.out.println("---------Login Successful!-----------");
            return acc;
        } else {
            System.out.println("---------Invalid password!----------");
            return null;
        }
    }
    
    void depositMoney(Account acc) {
        if (acc == null) return;

        System.out.print("Enter amount to deposit: ");
        double amount;
        try {
            amount = input.nextDouble();
            input.nextLine();
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter a numeric amount.");
            input.nextLine();
            return;
        }

        if (amount <= 0) {
            System.out.println("Deposit amount must be positive.");
            return;
        }

        Connection conn = null;
        try {
            conn = dbManager.getConnection();
            conn.setAutoCommit(false); // Start transaction

            // Step 1: Update balance in the Java object
            double newBalance = acc.getBalance() + amount;
            acc.setBalance(newBalance);

            // Step 2: Create transaction record in DB
            Transaction transaction = new Transaction(acc.getAccountNumber(), "CREDIT", amount);
            dbManager.addTransaction(conn, transaction);

            // Step 3: Update account balance in DB
            dbManager.updateAccount(conn, acc);

            conn.commit(); // Commit transaction if both operations succeed
            System.out.println("Deposited " + String.format("%.2f", amount) + ". New Balance: " + String.format("%.2f", acc.getBalance()));

        } catch (SQLException e) {
            System.err.println("Transaction failed: " + e.getMessage());
            if (conn != null) {
                try {
                    conn.rollback(); // Rollback on error
                    System.err.println("Transaction has been rolled back.");
                    // Revert balance in the Java object
                    acc.setBalance(acc.getBalance() - amount);
                } catch (SQLException ex) {
                    System.err.println("Error during rollback: " + ex.getMessage());
                }
            }
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    System.err.println("Error closing connection: " + e.getMessage());
                }
            }
        }
    }

    void withdrawMoney(Account acc) {
        if (acc == null) return;

        System.out.print("Enter amount to withdraw: ");
        double amount;
        try {
            amount = input.nextDouble();
            input.nextLine();
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter a numeric amount.");
            input.nextLine();
            return;
        }

        if (amount <= 0) {
            System.out.println("Withdrawal amount must be positive.");
            return;
        }

        if (amount > acc.getBalance()) {
            System.out.println("Insufficient funds. Current Balance: " + String.format("%.2f", acc.getBalance()));
            return;
        }

        Connection conn = null;
        try {
            conn = dbManager.getConnection();
            conn.setAutoCommit(false); // Start transaction

            // Step 1: Update balance in the Java object
            double newBalance = acc.getBalance() - amount;
            acc.setBalance(newBalance);

            // Step 2: Create transaction record
            Transaction transaction = new Transaction(acc.getAccountNumber(), "DEBIT", amount);
            dbManager.addTransaction(conn, transaction);

            // Step 3: Update account balance in DB
            dbManager.updateAccount(conn, acc);

            conn.commit(); // Commit transaction
            System.out.println("Withdrew " + String.format("%.2f", amount) + ". New Balance: " + String.format("%.2f", acc.getBalance()));

        } catch (SQLException e) {
            System.err.println("Transaction failed: " + e.getMessage());
            if (conn != null) {
                try {
                    conn.rollback(); // Rollback on error
                    System.err.println("Transaction has been rolled back.");
                    // Revert balance in the Java object
                    acc.setBalance(acc.getBalance() + amount);
                } catch (SQLException ex) {
                    System.err.println("Error during rollback: " + ex.getMessage());
                }
            }
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    System.err.println("Error closing connection: " + e.getMessage());
                }
            }
        }
    }


    void checkBalance(Account acc){
        if(acc != null){
            Account tempAcc = dbManager.getAccountByAccountNumber(acc.getAccountNumber());
            if (tempAcc != null) {
                System.out.println("Your current bank balance is: " + String.format("%.2f", tempAcc.getBalance()));
            } else {
                System.out.println("Could not fetch latest balance. Account might have been deleted.");
            }
        }
    }

    void displayTransactions(Account acc) {
        if (acc != null) {
            List<Transaction> transactions = dbManager.getTransactionsForAccount(acc.getAccountNumber());
            if (transactions.isEmpty()){
                System.out.println("No transactions available for Account " + acc.getAccountNumber() + ".");
            } else {
                System.out.println("Transaction History for Account " + acc.getAccountNumber() + ":");
                for (Transaction t : transactions) {
                    System.out.println(t);
                }
            }
        }
    }

    private void accountControlCenter(){
        System.out.println("\n======================== Account Control Center ==========================");
        System.out.println("1. Delete Account");
        System.out.println("2. Update Password");
        System.out.println("3. Update Name");
        System.out.println("4. Update Mobile Number");
        System.out.println("5. Update Aadhar Number");
        System.out.println("6. Update Email ID");
        System.out.println("7. Reset Password");
        System.out.print("Enter Option: ");
        byte option;
        try {
            option = input.nextByte();
            input.nextLine();
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter a number between 1-7.");
            input.nextLine();
            return;
        }

        switch (option){
            case 1:
                deleteAccount();
                break;
            case 2:
                updatePassword();
                break;
            case 3:
                updateName();
                break;
            case 4:
                updateMobileNumber();
                break;
            case 5:
                updateAadharNumber();
                break;
            case 6:
                updateEmailID();
                break;
            case 7:
                resetPassword();
                break;
            default:
                System.out.println("Enter valid option");
        }
    }

    private void AccountMenu(){
        Account acc = login();
        if(acc == null){
            return;
        }
        System.out.println("================== Welcome to Your Account =====================");
        boolean exit = false;
        while (!exit){
            System.out.println("\n1. Deposit");
            System.out.println("2. Withdrawal");
            System.out.println("3. View Transaction History");
            System.out.println("4. View Balance");
            System.out.println("5. View Account Detail");
            System.out.println("6. Logout");
            System.out.print("Choose an option: ");
            byte option;
            try {
                option = input.nextByte();
                input.nextLine(); // Consume newline
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter a number between 1-6.");
                input.nextLine();
                continue;
            }

            switch (option){
                case 1:
                    depositMoney(acc);
                    break;
                case 2:
                    withdrawMoney(acc);
                    break;
                case 3:
                    displayTransactions(acc);
                    break;
                case 4:
                    checkBalance(acc);
                    break;
                case 5:
                    // Fetch latest account details to ensure up-to-date info
                    Account latestAccDetails = dbManager.getAccountByAccountNumber(acc.getAccountNumber());
                    if (latestAccDetails != null) {
                        System.out.println(latestAccDetails);
                    } else {
                        System.out.println("Account details could not be retrieved. It might have been deleted.");
                        exit = true; // Force exit if account is gone
                    }
                    break;
                case 6:
                    System.out.println("Logged out from Account " + acc.getAccountNumber() + ".");
                    exit = true;
                    break;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }

    // Main Menu
    public void menu() {
        System.out.println("\n==================== Welcome to Basic Bank Account System =========================");

        boolean exit = false;
        while (!exit) {
            System.out.println("\n1. Create Account");
            System.out.println("2. Login to Account");
            System.out.println("3. Account Control Center");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");
            int option;
            try {
                option = input.nextInt();
                input.nextLine(); // Consume newline
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter a number between 1-4.");
                input.nextLine();
                continue;
            }

            switch (option) {
                case 1:
                    createAccount();
                    break;
                case 2:
                    AccountMenu();
                    break;
                case 3:
                    accountControlCenter();
                    break;
                case 4:
                    exit = true;
                    System.out.println("Exiting system. Goodbye!");
                    break;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }

    public static void main(String[] args) {
        BasicBankingSystem bank = new BasicBankingSystem();
        bank.menu();
    }
}
