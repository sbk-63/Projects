import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.*;
import java.util.regex.Pattern;
import java.io.*;

public class BasicBankingSystem {

    private final Scanner input = new Scanner(System.in);
    private static final SecureRandom random = new SecureRandom();

    // File name used for persistence.
    private static final String DATA_FILE = "bank_data.ser";

    // Container for all persistent data.
    private BankData data;

    private void saveData() {
        try (FileOutputStream fos = new FileOutputStream(DATA_FILE);
             ObjectOutputStream oos = new ObjectOutputStream(fos)) {
            oos.writeObject(data);
            System.out.println("Data saved successfully.");
        } catch (IOException e) {
            System.out.println("Error saving data: " + e.getMessage());
        }
    }

    private void loadData() {
        File file = new File(DATA_FILE);
        if (file.exists()) {
            try (FileInputStream fis = new FileInputStream(file);
                 ObjectInputStream ois = new ObjectInputStream(fis)) {
                data = (BankData) ois.readObject();
                System.out.println("Data loaded successfully.");
            } catch (IOException | ClassNotFoundException e) {
                System.out.println("Error loading data: " + e.getMessage());
                data = new BankData();
            }
        } else {
            data = new BankData();
        }
    }

    //load data on startup.
    public BasicBankingSystem() {
        loadData();
    }

    public static class BankData implements Serializable {
        @Serial
        private static final long serialVersionUID = 1L;
        public HashSet<Long> existingAccountNumbers = new HashSet<>();
        public HashMap<Long, Account> existingAccounts = new HashMap<>();
        public HashMap<String, Long> existingEmails = new HashMap<>();
        public HashMap<Long, Long> existingMobileNumbers = new HashMap<>();
    }

    public static class Transaction implements Serializable {
        @Serial
        private static final long serialVersionUID = 1L;
        private final long transactionId;
        private final long accountNumber;
        private final String transactionType; // CREDIT or DEBIT
        private final double amount;
        private final Date date;
        private final String notes;

        public Transaction(long accountNumber,long transactionId, String transactionType, double amount, String notes) {
            this.transactionId = transactionId;
            this.accountNumber = accountNumber;
            this.transactionType = transactionType;
            this.amount = amount;
            this.date = new Date();
            this.notes = notes;
        }

        @Override
        public String toString() {
            return "Transaction { " +
                    "ID: " + transactionId +
                    ", Account: " + accountNumber +
                    ", Type: " + transactionType +
                    ", Amount: " + amount +
                    ", Date: " + date +
                    ", Notes: '" + notes + '\'' +
                    " }";
        }

    }

    public static class Account implements Serializable {
        @Serial
        private static final long serialVersionUID = 1L;
        private String name;
        private long mobileNumber;
        private long aadharNumber;
        private String emailID;
        private final long accountNumber;
        private String hashedPassword; // SHA-256 hashed password
        private double balance;
        private final List<Transaction> transactions;

        public Account(String name, String emailID, long mobileNumber, long aadharNumber, long accountNumber, String hashedPassword) {
            this.name = name;
            this.emailID = emailID;
            this.mobileNumber = mobileNumber;
            this.aadharNumber = aadharNumber;
            this.accountNumber = accountNumber;
            this.hashedPassword = hashedPassword;
            this.balance = 0.0;
            this.transactions = new ArrayList<>();
        }

        // Setters
        void setHashedPassword(String hashedPassword){
            this.hashedPassword = hashedPassword;
        }

        void setName(String name){
            this.name = name;
        }

        void setMobileNumber(long mobileNumber){
            this.mobileNumber = mobileNumber;
        }

        void setAadharNumber(long aadharNumber){
            this.aadharNumber = aadharNumber;
        }

        void setEmailID (String emailID){
            this.emailID = emailID;
        }

        // Validate the entered password.
        boolean authenticate(String rawPassword) {
            return verifyPassword(rawPassword, hashedPassword);
        }

        // Deposit money.
        void deposit(double amount, String notes) {
            balance += amount;
            transactions.add(new Transaction(accountNumber, random.nextLong(10000000),"CREDIT", amount, notes));
            System.out.println("Deposited " + amount + ". New Balance: " + balance);
        }

        // Withdraw money if sufficient balance.
        void withdraw(double amount, String notes) {
            if (amount > balance) {
                System.out.println("Insufficient funds. Current Balance: " + balance);
            } else {
                balance -= amount;
                transactions.add(new Transaction(accountNumber,random.nextLong(10000000), "DEBIT", amount, notes));
                System.out.println("Withdrew " + amount + ". New Balance: " + balance);
            }
        }

        // Display all transactions for this account.
        void displayTransactions() {
            if (transactions.isEmpty()){
                System.out.println("No transactions available.");
            } else {
                System.out.println("Transaction History for Account " + accountNumber + ":");
                for (Transaction t : transactions) {
                    System.out.println(t);
                }
            }
        }

        @Override
        public String toString() {
            return "Account { " +
                    "AccountNumber: " + accountNumber +
                    ", Name: " + name +
                    ", Email: " + emailID +
                    ", Mobile: " + mobileNumber +
                    ", Aadhar: " + aadharNumber +
                    ", Balance: " + balance +
                    " }";
        }
    }

    // Fundamental Section
    String name() {
        boolean validName = false;
        String name = "";
        while (!validName) {
            System.out.print("Enter Your Name: ");
            name = input.nextLine();
            String regex = "^[a-zA-Z]+( [a-zA-Z]+)*$";
            validName = Pattern.matches(regex, name);
            if (!validName)
                System.out.println("Invalid Name! Please use alphabetic characters only.");
        }
        return name;
    }

    long mobileNumber() {
        boolean valid = false;
        long number = 0;
        while (!valid) {
            System.out.print("Enter Your Mobile Number: ");
            number = input.nextLong();
            input.nextLine();
            if (String.valueOf(number).length() == 10)
                valid = true;
            else
                System.out.println("Invalid Mobile Number! Please enter a 10-digit number.");
        }
        return number;
    }

    long aadharNumber() {
        boolean valid = false;
        long number = 0;
        while (!valid) {
            System.out.print("Enter Your Aadhar Number: ");
            number = input.nextLong();
            input.nextLine();
            if (String.valueOf(number).length() == 12)
                valid = true;
            else
                System.out.println("Invalid Aadhar Number! Please enter a 12-digit number.");
        }
        return number;
    }

    String email() {
        boolean valid = false;
        String email = "";
        while (!valid) {
            System.out.print("Enter Your Email: ");
            email = input.nextLine();
            String regex = "^[a-zA-Z0-9_.+%]+@[a-zA-Z0-9_.+%]+\\.[a-zA-Z]{2,}$";
            valid = Pattern.matches(regex, email);
            if (!valid)
                System.out.println("Invalid Email! Please enter a valid email address.");
        }
        return email;
    }

    boolean checkValidPassword(String password) {
        if (password.length() < 8) {
            return false;
        }
        String upperCasePattern = ".*[A-Z].*";
        String lowerCasePattern = ".*[a-z].*";
        String digitPattern = ".*[0-9].*";
        String specialCharPattern = ".*[!@#$%^&*()\\-_=+<>?].*";

        boolean hasUpperCase = password.matches(upperCasePattern);
        boolean hasLowerCase = password.matches(lowerCasePattern);
        boolean hasDigit = password.matches(digitPattern);
        boolean hasSpecialChar = password.matches(specialCharPattern);
        return hasUpperCase && hasLowerCase && hasDigit && hasSpecialChar;
    }

    // Generate a unique account number.
    long generateAccountNumber() {
        long accountNumber;
        do {
            accountNumber = 100000000000L + Math.abs(random.nextLong() % 900000000000L);
        } while (data.existingAccountNumbers.contains(accountNumber));
        data.existingAccountNumbers.add(accountNumber);
        return accountNumber;
    }

    // generate 6 digit Password
    private int generateOtp() {
        int otp = 100000 + random.nextInt(900000);
        System.out.println("Generated OTP: " + otp);
        return otp;
    }

     private boolean verifyOtp() {
        final int MAX_ATTEMPT = 3;
        int otp = generateOtp();
         for (int i = 0; i < MAX_ATTEMPT; i++) {
             System.out.print("Enter Password: ");
             int entered = input.nextInt();
             if(otp == entered){
                 return true;
             } else {
                 System.out.println("Incorrect OTP");
                 if(i < MAX_ATTEMPT - 1){
                     System.out.println("1. Re-enter, 2. Resend OTP, and 3. cancel.");
                     System.out.print("Enter option: ");
                     byte option = input.nextByte();
                     if(option == 3){
                         return false;
                     }
                     if(option == 2){
                         otp = generateOtp();
                         System.out.println("Re-generated OTP is: " + otp);
                     }
                 }
             }
         }
         return false;
    }

    // Generate Password of length between 12 and 16
    String generatePassword() {
        int len = 12 + random.nextInt(5);
        StringBuilder password = new StringBuilder();
        String UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String LOWER = "abcdefghijklmnopqrstuvwxyz";
        String DIGITS = "0123456789";
        String SPECIAL = "!@#$%^&*()-_=+<>?";
        String ALL = UPPER + LOWER + DIGITS + SPECIAL;
        int choice = 1;
        for (int i = 0; i < len; i++) {
            if (i % 3 == 0) {
                switch (choice) {
                    case 1:
                        password.append(UPPER.charAt(random.nextInt(UPPER.length())));
                        break;
                    case 2:
                        password.append(LOWER.charAt(random.nextInt(LOWER.length())));
                        break;
                    case 3:
                        password.append(DIGITS.charAt(random.nextInt(DIGITS.length())));
                        break;
                    default:
                        password.append(SPECIAL.charAt(random.nextInt(SPECIAL.length())));
                        break;
                }
                choice = (choice % 4) + 1;
            } else {
                password.append(ALL.charAt(random.nextInt(ALL.length())));
            }
        }
        return password.toString();
    }

    // Generate password with salt value
    private String hashPassword(String password) {
        byte[] salt = new byte[16];
        random.nextBytes(salt);
        String saltStr = Base64.getEncoder().encodeToString(salt);
        String saltedPassword = saltStr + password;

        String hashedPassword = SHA256(saltedPassword);
        return saltStr + ":" + hashedPassword;
    }

    private static String SHA256(String password){
        try{
            // SHA-256 produce 256 bits or 64 bytes of hexadecimal values
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hash = digest.digest(password.getBytes(StandardCharsets.UTF_8));
            StringBuilder hexString = new StringBuilder();
            for (byte b : hash) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1)
                    hexString.append('0');
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    private static boolean verifyPassword(String rawPassword, String hashedPassword) {
        String[] parts = hashedPassword.split(":"); //
        if(parts.length != 2){
            throw new IllegalArgumentException("Invalid Stored Password!");
        }
        String saltedPassword = parts[0] + rawPassword;

        return parts[1].equals(SHA256(saltedPassword));
    }

    String createPassword() {
        System.out.print("1. System Generated Password, 2. own password: ");
        int choice = input.nextInt();
        input.nextLine();
        String password = "";
        if (choice == 1) {
            password = generatePassword();
            System.out.println("Generated Password: " + password);
        } else if (choice == 2) {
            Console console = System.console();
            for (int i = 0; i < 3; i++) {
                System.out.println("Password must be at least 8 characters long and contain an uppercase letter, " +
                        "a lowercase letter, a digit, and a special character.");
                if (console != null) {
                    char[] passArray = console.readPassword("Enter Password: ");
                    password = new String(passArray);
                } else {
                    System.out.print("Enter Password: ");
                    password = input.nextLine();
                }
                if (checkValidPassword(password)) {
                    break;
                } else {
                    System.out.println("Password does not meet the required criteria. Please try again.");
                }
            }
        }
        return hashPassword(password);
    }

    public void createAccount() {
        System.out.println("=========== Account Creation ===========");
        String name = name();
        long mobile = mobileNumber();
        long aadhar = aadharNumber();
        String email = email();
        long accountNumber = generateAccountNumber();

        // OTP Verification
        if (!verifyOtp()) {
            System.out.println("OTP verification failed. Account creation aborted.");
            return;
        }

        String hashedPwd = createPassword();
        Account newAccount = new Account(name, email, mobile, aadhar, accountNumber, hashedPwd);
        data.existingAccounts.put(accountNumber, newAccount);
        data.existingEmails.put(email, accountNumber);
        data.existingMobileNumbers.put(mobile, accountNumber);

        System.out.println("Account created successfully!");
        System.out.println(newAccount);
    }

    // Account Control Center Section
    void deleteAccount() {
        System.out.print("Do you want to delete your account? (y/n): ");
        String str = input.nextLine().trim().toLowerCase();
        if (!str.equals("y")) {
            System.out.println("Account deletion canceled.");
            return;
        }
        System.out.print("Enter Account Number: ");
        long accNum = input.nextLong();
        input.nextLine(); // clear nextLine buffer
        Account acc = data.existingAccounts.get(accNum);
        if (acc == null) {
            System.out.println("Invalid Account Number. Account deletion failed.");
            return;
        }
        System.out.print("Enter Password: ");
        String password = input.nextLine();
        if (!acc.authenticate(password)) {
            System.out.println("Incorrect Password. Account deletion failed.");
            return;
        }
        if (!verifyOtp()) {
            System.out.println("OTP verification failed. Account deletion aborted.");
            return;
        }
        // Final confirmation before deletion
        System.out.print("Are you sure, you want to delete this account? This action cannot be undo. (y/n): ");
        String confirmation = input.nextLine().trim().toLowerCase();
        if (!confirmation.equals("y")) {
            System.out.println("Account deletion canceled.");
            return;
        }
        // Remove account from all data structures
        data.existingAccounts.remove(accNum);
        data.existingEmails.remove(acc.emailID);
        data.existingMobileNumbers.remove(acc.mobileNumber);
        data.existingAccountNumbers.remove(accNum);

        System.out.println("------------- Account Successfully Deleted! ------------");
    }

    private Account getAccountForUpdate(String action) {
        System.out.print("Do you want to " + action + " (y/n): ");
        String str = input.nextLine().trim().toLowerCase();
        if (!str.equals("y")) {
            return null;
        }
        System.out.print("Enter Account Number: ");
        long accNum = input.nextLong();
        input.nextLine();
        Account acc = data.existingAccounts.get(accNum);
        if (acc == null) {
            System.out.println("Account Not Found");
            return null;
        }
        if (!verifyOtp()) {
            System.out.println("OTP verification failed. Operation aborted.");
            return null;
        }
        return acc;
    }

    void updateName() {
        Account acc = getAccountForUpdate("update Name");
        if (acc != null) {
            acc.setName(name());
            System.out.println("Name Successfully Updated!");
        }
    }

    void updateMobileNumber() {
        Account acc = getAccountForUpdate("update Mobile Number");
        if (acc != null) {
            acc.setMobileNumber(mobileNumber());
            System.out.println("Mobile Number Successfully Updated!");
        }
    }

    void updateAadharNumber() {
        Account acc = getAccountForUpdate("update Aadhar Number");
        if (acc != null) {
            acc.setAadharNumber(aadharNumber());
            System.out.println("Aadhar Number Successfully Updated!");
        }
    }

    void updateEmailID() {
        Account acc = getAccountForUpdate("update Email ID");
        if (acc != null) {
            acc.setEmailID(email());
            System.out.println("Email ID Successfully Updated!");
        }
    }

    void updatePassword() {
        Account acc = getAccountForUpdate("update Password");
        if (acc != null) {
            acc.setHashedPassword(createPassword());
            System.out.println("Password Successfully Updated!");
        }
    }


    // Account Menu Section
    private long loginWithAccNum(){
        System.out.print("Enter Account Number: ");
        long accNum = input.nextLong();
        input.nextLine();
        return accNum;
    }

    private long loginWithMob(){
        System.out.print("Enter Mobile Number: ");
        long mob = input.nextLong();
        input.nextLine();
        Long accNum = data.existingMobileNumbers.get(mob);
        if(accNum == null){
            System.out.println("Invalid Mobile Number");
            return -1;
        }
        return accNum;
    }

    private long loginWithEmail(){
        System.out.print("Enter Email id: ");
        String email = input.nextLine();
        Long accNum = data.existingEmails.get(email);
        if(accNum == null){
            System.out.println("Invalid Email ID");
            return -1;
        }
        return accNum;
    }

    private Account login() {
        System.out.println("Login with");
        System.out.println("1. Account Number, 2. Mobile Number, and 3. Email id.");
        System.out.print("Enter Option: ");
        byte option = input.nextByte();
        input.nextLine();
        long accNum = switch (option) {
            case 2 -> loginWithMob();
            case 3 -> loginWithEmail();
            default -> loginWithAccNum();
            };
        Account acc = data.existingAccounts.get(accNum);
        if (acc == null) {
            System.out.println("Account not found!");
            return null;
        }
        System.out.print("Enter Password: ");
        String password = input.nextLine();
        if (acc.authenticate(password)) {
            if(!verifyOtp()){
                System.out.println("OTP verification failed, Account login Aborted!");
                return null;
            }
            System.out.println("---------Login Successful!-----------");
            return acc;
        } else {
            System.out.println("---------Invalid password!----------");
            return null;
        }
    }

    void depositMoney(Account acc) {
        if (acc != null) {
            System.out.print("Enter amount to deposit: ");
            double amount = input.nextDouble();
            input.nextLine();
            System.out.print("Enter deposit notes: ");
            String notes = input.nextLine();
            acc.deposit(amount, notes);
        }
    }

    void withdrawMoney(Account acc) {
        if (acc != null) {
            System.out.print("Enter amount to withdraw: ");
            double amount = input.nextDouble();
            input.nextLine();
            System.out.print("Enter withdrawal notes: ");
            String notes = input.nextLine();
            acc.withdraw(amount, notes);
        }
    }

    void checkBalance(Account acc){
        if(acc != null){
            System.out.println("Your bank balance is: " + acc.balance);
        }
    }

    void displayTransactions(Account acc) {
        if (acc != null) {
            acc.displayTransactions();
        }
    }


    private void accountControlCenter(){
        System.out.println("======================== Account Control Center ==========================");
        System.out.println("1. Delete Account");
        System.out.println("2. Update Password");
        System.out.println("3. Update Name");
        System.out.println("4. Update Mobile Number");
        System.out.println("5. Update Aadhar Number");
        System.out.println("6. Update Email ID");
        System.out.print("Enter Option: ");
        byte option = input.nextByte();
        switch (option){
            case 1:
                deleteAccount();
                break;
            case 2:
                updatePassword();
                break;
            case 3:
                updateName();
                break;
            case 4:
                updateMobileNumber();
                break;
            case 5:
                updateAadharNumber();
                break;
            case 6:
                updateEmailID();
                break;
            default:
                System.out.println("Enter valid option");
        }
    }

    private void AccountMenu(){
        Account acc = login();
        if(acc == null){
            return;
        }
        System.out.println("================== Welcome in Your Account =====================");
        boolean exit = false;
        while (!exit){
            System.out.println("1. Deposit");
            System.out.println("2. withdrawal");
            System.out.println("3. view transaction history");
            System.out.println("4. view balance");
            System.out.println("5. view Account detail");
            System.out.println("6. Main Menu");
            System.out.print("choose an option: ");
            byte option= input.nextByte();
            switch (option){
                case 1:
                    depositMoney(acc);
                    break;
                case 2:
                    withdrawMoney(acc);
                    break;
                case 3:
                    displayTransactions(acc);
                    break;
                case 4:
                    checkBalance(acc);
                    break;
                case 5:
                    System.out.println(acc);
                    break;
                case 6:
                    System.out.println("Exit from Account");
                    exit = true;
                    break;
                default:
                    System.out.println("Enter valid Number");
            }

        }
    }

    // Main Menu
    public void menu() {
        System.out.println("\n==================== Welcome in Basic Bank Account System =========================");

        boolean exit = false;
        while (!exit) {
            System.out.println("1. Create Account");
            System.out.println("2. Login Account");
            System.out.println("3. Account Control Center");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");
            int option = input.nextInt();
            input.nextLine();
            switch (option) {
                case 1:
                    createAccount();
                    break;
                case 2:
                    AccountMenu();
                    break;
                case 3:
                    accountControlCenter();
                    break;
                case 4:
                    exit = true;
                    saveData();
                    System.out.println("Exiting system. Goodbye!");
                    break;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }

    public static void main(String[] args) {
        BasicBankingSystem bank = new BasicBankingSystem();
        bank.menu();
    }
}
